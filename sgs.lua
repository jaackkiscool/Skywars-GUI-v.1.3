-- https://discord.gg/2XDXd2Hmzq

return (function(T, ...) local PSU_CHECKMARK = 'This file was obfuscated using PSU Obfuscator 5.0.A | discord.gg / 2XDXd2Hmzq'; local V643231896 = T[(916474747)];  local V5 = T[((#{} + 0x2CCF9432))];  local V108023668 = T[((461944401 - #("string here......>.")))];  local V91 = T[(0x1AB9AB31)];  local V852977441 = T[(599389332)];  local V210 = T['naiLbmYp'];  local V261984888 = T["VD9zrts"];  local V3 = T[(921064432)];  local V36 = T[((#{0x2B5;0x230;62;0x30A;} + 0x2365FD3A))];  local V833150099 = T[(50935283)];  local V32 = T[(87065053)];  local V304319413 = T['pvSdD'];  local V521005886 = T['dJqNYW'];  local V93117534 = T[(315501214)];  local V355950943 = T.lB3kr;  local V724685673 = T[(946624079)];  local V810739927 = T[((884885297 - #("string here......>.")))];  local V248 = T[(239109478)];  local V1 = T[((34959562 - #("string here......>.")))];  local V233 = T[(0x1800D5C7)];  local V852590809 = T.NZRYPop;  local V488521753 = T.Ibe0dV;  local V165 = T['Hd5SL'];  local V258940944 = T[(0x1FD65D9E)];  local V90 = T[(0x1E765C65)];  local V686436632 = T[((732479180 - #("string here......>.")))];  local V2 = T[((#{847;274;(function(...)return 25,0x0F5,257,0x17E;end)()} + 0x2A3285D4))];  local V0 = T[((#{0x26E;0x2F9;535;} + 0x8B3024A))];  local V520873772 = T.wBu0FddhWz;    local GetFEnv = ((getfenv) or (function(...) return (_ENV); end)); local Storage, _, Environment = ({}), (""), (GetFEnv(V1));  local bit32 = ((Environment[""..T[V488521753]..T[V355950943].."\116"..T['LJaDjgM'].."\50"]) or (Environment[""..T[V488521753].."\105\116"]) or ({})); local BitXOR = (((bit32) and (bit32["\98\120\111\114"])) or (function(A, B) local P, C = V1, V0; while ((A > V0) and (B > V0)) do local X, Y = A % V2, B % V2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / V2, (B - Y) / V2, P * V2; end; if A < B then A = B; end; while A > V0 do local X = A % V2; if X > V0 then C = C + P; end; A, P =(A - X) / V2, P * V2; end; return (C); end));  local MOD = (V2 ^ V32); local MODM = (MOD - V1); local BitSHL, BitSHR, BitAND;    local SubString = (_[""..T[V643231896]..T.f7caJn..T[V488521753]]); local Character = (_["\99\104"..T[V833150099].."\114"]); local GSub = (_["\103"..T[V643231896].."\117\98"]); local Byte = (_[""..T[V488521753]..T[V810739927]..T[V852590809]..T.GtqqOvyUh]);    local LDExp = ((Environment[""..T[V108023668]..T[V833150099].."\116\104"][""..T['ISDL0A3dxm']..T[V852977441].."\101\120"..T[V304319413]]) or (function(Value, Exponent, ...) return ((Value * V2) ^ Exponent); end)); local Type = (Environment["\116\121"..T[V304319413]..T['GtqqOvyUh']]); local RawSet = (Environment[""..T[V261984888].."\97"..T[V93117534].."\115"..T["GtqqOvyUh"]..T[V852590809]]); local ToNumber = (Environment[""..T[V852590809].."\111\110\117"..T[V108023668]..T[V488521753]..T['GtqqOvyUh'].."\114"]); local Select = (Environment["\115\101"..T["ISDL0A3dxm"].."\101"..T[V521005886]..T[V852590809]]); local UnPack = ((Environment["\117"..T[V724685673].."\112\97\99\107"]) or (Environment["\116"..T[V833150099]..T[V488521753]..T['ISDL0A3dxm'].."\101"][""..T.f7caJn.."\110"..T[V304319413]..T[V833150099]..T[V521005886].."\107"])); local Floor = (Environment["\109\97"..T[V852590809]..T[V520873772]]["\102\108\111"..T.fJuHC.."\114"]); local SetMetaTable = (Environment[""..T[V643231896].."\101\116\109\101"..T[V852590809].."\97"..T[V852590809]..T[V833150099].."\98"..T.ISDL0A3dxm.."\101"]); local Pairs = (Environment[""..T[V304319413].."\97\105\114\115"]);    local BitNOT = (bit32["\98"..T[V724685673].."\111"..T[V852590809]]) or (function(A, ...) return (MODM - A); end); BitAND = (bit32["\98"..T[V833150099].."\110"..T[V852977441]]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / V2); end); BitSHL = ((bit32["\108\115\104"..T[V355950943].."\102\116"]) or (function(A, B, ...) if (B < V0) then return (BitSHR(A, -(B))); end; return ((A * V2 ^ B) % V2 ^ V32); end)); local BitOR = (bit32[""..T[V488521753].."\111\114"]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end); BitSHR = ((bit32[""..T[V261984888]..T[V643231896].."\104"..T[V355950943].."\102"..T[V852590809]]) or (function(A, B, ...) if (B < V0) then return (BitSHL(A, -(B))); end; return (Floor(A % V2 ^ V32 / V2 ^ B)); end));  if ((not (Environment["\98\105"..T[V852590809]..T["LJaDjgM"]..T[V686436632]])) and (not (Environment["\98"..T[V355950943]..T[V852590809]]))) then  bit32[""..T[V488521753].."\111"..T[V261984888]] = BitOR; bit32[""..T['ISDL0A3dxm']..T[V643231896].."\104\105\102\116"] = BitSHL; bit32["\98\120\111"..T[V261984888]] = BitXOR; bit32["\98"..T[V724685673]..T["fJuHC"]..T[V852590809]] = BitNOT; bit32[""..T[V261984888].."\115\104\105\102\116"] = BitSHR; bit32[""..T[V488521753].."\97"..T[V724685673].."\100"] = BitAND;  end;    local Create = (((Environment[""..T[V852590809].."\97\98\108"..T.GtqqOvyUh][""..T[V521005886]..T[V261984888]..T["GtqqOvyUh"]..T[V833150099]..T[V852590809]..T.GtqqOvyUh])) or ((function(Size, ...) return ({ UnPack({}, V0, Size); }); end))); local Insert = (Environment[""..T[V852590809].."\97"..T[V488521753]..T["ISDL0A3dxm"]..T["GtqqOvyUh"]]["\105\110"..T[V643231896].."\101\114"..T[V852590809]]); local Remove = (Environment["\116\97"..T[V488521753]..T.ISDL0A3dxm.."\101"][""..T[V261984888].."\101\109"..T.fJuHC..T[V258940944]..T.GtqqOvyUh]); local Concatenate = (Environment[""..T[V852590809].."\97\98"..T["ISDL0A3dxm"]..T.GtqqOvyUh]["\99"..T["fJuHC"].."\110"..T[V521005886]..T[V833150099]..T[V852590809]]);  Environment["\98\105"..T[V852590809]..T["LJaDjgM"].."\50"] = bit32;  local PrimaryXORKey = (V91); local TEXT = string.reverse('u'..'sp/'..'gg'..'.drocsid & /ved.usp.www//:sp'..'tth | A.0.4 rotacsufbO USP gnisu detacsufbo saw elif sihT');    local F = (#TEXT + V165); local G, Dictionary = ({}), ({}); for H = V0, F - V1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end; local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, V1, V3); if ((X + Y + Z) ~= V248) then PrimaryXORKey = PrimaryXORKey + V210; F = F + V233; end; ByteString = SubString(ByteString, V5);  local C, D, E = (""), (""), ({}); local I = V1; local function K() local L = ToNumber(SubString(ByteString, I, I), V36); I = I + V1; local M = ToNumber(SubString(ByteString, I, I + L - V1), V36); I = I + L; return (M); end; C = Dictionary[K()]; E[V1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, V1, V1); end; G[F] = C .. SubString(D, V1, V1); E[#E + V1], C, F = D, D, F + V1; end; return (Concatenate(E)); end)("PSU|24425r10101c1b1727621Z21h1J1n1V1t1d23922321Z27622w1s1014132211l1022L1J1M22h2211e1t1s1T1N1n161m1n1H1c111q1h1B1Q22I2251C1221u21x1b10121828N1q1G1c101321v23G21c1H1R1p141722K21u1c181721T22k1O1i1E1M1j1122l21u1p1K2311t1H27622u1F1R2851F151a181f111H1h161N1r1t23i161a27622v121h1q1B1427E1M1723C27927621x2171f131e191122W111d27622821r16171Q171W21I1N141v1A1622X121E27621Y21b171a1Y21b1r111721j21711151822w2An2bc191P22I1728m1022421L1K21E21I29N1T17191k23J1E1227622n1o223151927623B1O1t1P1O131H122b82ba27b1y1h21c1x1m1G161B1a151F2B023j2bx2762371M2A02b4151b11121l2392aJ102A92dc1b1O23E1d112762B72b727622R1H2B41l1h22X2dv1023717161r2c722z1k1O27622b21m141O1p1d1L1T161121o21f151D1s1621r1z28I1d1921821922W2CT1022a21j18121r1h1Z21F1R1d1n2El1122Q2F22F42D2111n1x2c4102c62c823J2DK2DA2B42b62b81428p102392861N1M151l1l2312e322P18141f1D1r23C191527621T21e102Db2ai27A1021V2171927T1h2ar2d82f32F52f71h1W21f1j28E23c2F221u21C1R29W21p2121m181O21121F27H23D2E321w1X171G1r1q23j2A22762hM13171K2CN2BM2GT2132161A171h1821a2gS1L21D2h328e1723j2gb2762382aY1g22X1v1J276236171r21D2181m286171n21M21L1j2Fc2Fe2Em22q2gh29O1A132fp23I2E32361j1F1A1B1222p2Dk22P2d51t182gB2GA142762311C1L1S22s2CH2gj1Y10286102821b2392GX21z2cV2BM2Bo182871b22q2DK22v181b19122DF22X2fy2762212131q1Y21j1D1P2Ik2DK2361n1k141S29r2B92Bb1022R2KI1f2KJ1g152a12ku1g1m2Fs2GP2gr192L9122ar2BS1022121M21E2252gx22b2132e72c721d2kt2kv22X2iG1022C21N28u22o2kn1022021p1O1c29X161d2aS2AU102js1A1E21m214152A31L2aO1922X2aT2762222112Ay2b02B22fv2B722x2A62762241z1821G2B32b52n42J51022s2BK1n1i22z2E321V21813131T21T21R2m92dm101h141c1u23j2jX1022p1K111r2l227a2Gf2M322q2aU1322O2e322821d27e2h52Lo2371a1N22Q2n61029P29R1m1Q2ap2Gd22O2772DW1B1d162F61F171d152iM22X2o222x1q21821o122kk2dR22w2Gx2kP1U151121n21929w2a12Go27622E21f2a12a321S21q2m92k71A28o2A02K42NF2oh2d52ie29M2ED21E1O21G2141M101I161221j21J2L02lf2AH2E322x171T2871623C2oz2e41I1N1j1C2qt171L2gD2b82nf22c21d2NY2o02mW1021u2172bF152MT2h22h41Q2qX28T1021Z21229621I2Fo2FQ2C92e32dx2ki141r22R2lo2341S1U2A52A72f32131r21P2nc2FW2m22jq102381T29V22v2DK2Pc21821P2i52g72O22LJ1j1J122881N23i2m92L72gT172Cp1C22P2qB10235141g2TC21M21C1121d2171H192gT27g2qW2im2D92DB2172171s1Q2dd21n21i2dr28E1t27H22K2112762U426O25r21F2nF22B21n2o923c2O22202131V101l1N21C2rh2ke2GP2ra1t1c21I2191n2381S1G2dW2Pg2p121M21I171O1N2p72p72e022X2Uw2762Mb2Md2mF1d21i21p101r2102oi2Qw2f22DM1n28a101b2A12FF1T23J2Oq2312PH1f1v1u1I2A32lH2VB21o27P21J2CV23C2m322v1629622x2dk22321A1s21M2182KL2Qy2251y1b1h1p1921I28Y2901423C1q2qH2L62dY142e02wl2Iu2Ag2ix2Iz2J12FF2j42gI1022t1n2fP2A42M32aL1r1O22p2U921n2EX102Of162Tp161h2iq22q2nM1521g2R21822X2nf2342sw2aU2M82fZ21u1z1I1m21H2VL2Ud2ci1022821O1d1O1S1n21H21e1s2242u32U421S2672672242nF2wp1Q2862Km2FZ22u2j02fD2xc2Gx2up1c2132sE2N42M322d1H2191422p2M92382o72e62E81922z2lO22A21f1O2392vA1022D2hD1n21N2132pM112ze2N32b82Oq2BD29r2ru2B427E23i2m322b21i2X423c2T82Da1H1S2mW111B1u121T1v2UJ2mG2392M32382eX1l2y52Xe21y2y22wF2re22r2UZ1d21M2UT2Ju1D2Cr2qs2by2n82EW21r2wW29123c2zZ2BD151o2Dy2zR1Y2am2MT2Ar2M92KP2C62R62P22n52s92k71h31082nd2b82m32oh2ju22s2R92121j18152xT2762322Xm2P52sz2OG2Ym2yo2sZ2M323B2he1t2gg2xE2rZ192Wy2kx2KZ2Tb2aG23c2tO2dL2AA2TR2Tt2TV2Tx310s1Q2u027I2nf22U2P61v1M22x2W22Ed21K1a2E02p61E27w21G2ym1l1I19310W2T729n102z228621321J2ds2bj22n23621B29u182Sm2uO21d2xh312J172un2a82AA2SW2dO23e2M322621b31192mJ21V2v2101N28e2w92962r12312GX22e21R1r2eM1K1d21l310223i2Dk22i21H121F1B1C2lg2M92g12qV31132wG2Gp2LV1H27t1l2AR2O221T1Y2FE1V1n2e031202fz2yU1e1f2822e9131F314Q2A027w1q18315Y2G62MT31152mx2111d2172f02dK2NN2831Y2yS22T2QY2pJ27p1d2z82J22fG2M32OS1n2Sg27622f21E192BQ2f22Ip2iR2iT2IV2IX21f29j29l31462Dm310Q2Au310S310U310W310Y27I2Dk2YL2yN2yP112D72bY22621N1o312Q2H22LL2e22Xu313b2Dc1222Z2M92yc28o2f828O22v2Nf22e2M02ik2GX311l121D21O312T2Yp23i2oL2a12322O222c2yd2vr213213181922r2Gx2H82B41a1X2mz2AZ2ie2Y62f72az23C2RE22P22A17112AY17319S2ek2C62172dr2762132172OQ2302ao151n2zq2E92o22nh2WE310V1p2CH318D2vb2152Je319a31ah2L628A311h1l313027631951I2Vr22q2gX2DX1j2w31r2872AE2Sz318j2191B1T21Q21q31B72L72gP2zv16131B2j822o316G2762F42JU29U2dh2gv2BH2bj2AH2M9311s192142qG1r22s2gX2DA317M21M2Pf2Y931bK1023B2Mq29M31C429T1P1i1D313x1M22w2Nf2hm2qK1d22o2f2318731892iW2Fn2Qo2p12B82t831Bm1s31bo316821j2sb1T1j2qk317c2gQ2I923C2e32202zK3182312G2xE2Ua2O62qw2OQ2l72p22P4319t2zX2O223b1i2i51S2961E1H23C31c72ra2TK1L2TM312a2Sf2nF2zI2Zk22N21q2qY2KP2EH141E310E31b323I2re2391r317w2f82A121721K1I1S22t2E32rr2962eZ22W2M931E02tL2eL2YI2ed28y2xh1B21531702sN1729728t1222r2nf2dm1J142332lO2Kg1B2bR2J82xF1m1323g2o222f2tX1721k1z27T31692Tp2C52C72C92Qy31at2vr2Sd310922x2lO2QS2Rn2gx234310v31en1N31ep31eR22t2lO2321B1i23f2o221u31B61T21r21529m2b82re2262ti132cL1P2122181J1P1e2Sz2qy22B21o1q1R1A21J2zF310A31272YS2v131ga2o222A21N316c1S21f21h29023g2nm1Y31561j2312dk2PV2Px2nr21r2o222e141131hJ31D7312X1j1s2xd2iH2MS2ap316Q2e42Cp1m1P22Q2nU2AA2882811023p26u276131J2Ux1U1U27631au316l25o25o2761x22P21S1229v2Jn112dS1J1Q192NP31eR141A24c24C31J4101P31FN22W31jr1u1C1y2JZ101x111w2ba1c31K631ER131D22622627631jG102c72CB2lM2Ds2a21C1E1E2At1c2X028i31KI2761b2By31ER121C24D24D31kD1D278111A31l531ke2eQ1831L531iz2Ux26s26s31JR1M1431j731j923K24h2cr1431lN31kE27W2Rj1331eR181631km31Kd2ds2PN14161631Au31LG24E24E31jR1n1522f22f31J923b22e13161531MH31Er19319s2Ds1031kE29E15319V31ke2mM2sH31kE1U1Q31mu2Ds2TK2U431Ke1o2EC276121u27o2U42QI1S29X22R22R31Lx2uI1n1221921931er1D131s31n831Er1A1422M22m31J41s1b1522122131nv31Lu24O24o31Nv31mk23423431NV2p323g23g31NV2C723F23F31Nv31jn25D25D31nV2De24024031nV31Kx22a22a31NV31k922422431nv102Mn21m31Nv111f22522531Nv1u1G24p24P31nV1V1H31j231nV1S1I21X21X31Nv31d424X24X31NV1q1K25125131Nv1R1l22i22i31nv1o1m23e23E31nV1P1N2QM31NV1m1O31OF31nv1n1p21R21r31nV1k1Q22Z22z31Nv1L1R25025031nV31Er22022031Nv1j1T22o2Oy31na1g1u25p25P31Nv1h1v24b24B31nV21a1W25N25n31nv21B1x31MA31Nv2181y23823831NV2191Z25625631NV21621024424431nv217316S2mJ31Er21421223L23l31NV21521321d21D31nV212214319831NV21321522H22h31nv21021623523531nv21121721021031Nv1Y2Wm31kv1s1z21922t317131Na1w21A25a25a31Nv1X21b21W21W31NV21q21C2SV31Nv21r21D2TC31nV21O21E24824831nV21p21F1K1k31nV21m21G21621631KD31Mn16141221g21G31Nl132RU31nv31NR23M23m31nv31NX21Z27L31Na31lu23r23R31o51723d23D31O91821521531Od1931M131oh1a23k23K31oL1B23T23t31OP1C31ln31ot1d22c22c31ox1E21k21K31p12Je2S931ER31p72U031PB1h23H23h31PF1I22W31jV31Na31D431LI31Na31PP31JZ31pT1l1W1w31py1M1V2UH31nA31Q431Nj31q71O22222231qB1P24724731qg1q21y21y31ql1R24224231qq1S23c2qx31NA31Qv25925931NV31r022K22k31R41V22G22g31R91W31N031nA31rF24A24a31rI1Y24U24U31RN1Z31n331RS2101P1p31RX2111I31AU31nA31S223U23U31s621321a21A31SB21431k631Sf21531MH31sk21621b21b31Sp21725M25M31SU21824l24L31nV31Sz29Z31Nv31T424124131T821b23123131TD21C31q631nA31TI23P23P31TL21E25225231tQ21F23V23V31tv21g21821831KD1331Lm31u431U61S31Nm1z1Z31ua1425J25j31ue1523z23z31o11622b22B31UM25I25I31UQ23W23W31uU21v21V31ux23y23Y31v125f25F31v524T24T31v822Q22Q31Vc25g25g31VG21P2vh31Na31p722u22u31vM21c21C31vq22J22J31pk312J2fz31eR31pp22y22y31W02pg31W423A23A31q31n25K25k31wb23N23N31Wf319V31wJ23923931Wn21N2M631na31ER23323331qU1t22922931WZ1U25425431X323X23X31X71R1r31rE1X24S24s31xe24M24M31xi24F24F31Xl21t21t31xP25b25b31NV31s225h25H31xX21U21u31y124i24I31Y422P22P31Y723023031yb24Q24q31yF23723731yJ21925E25e31Ym21A22X22X31YQ24924931YU21E2Gl31yX21D22N22N31Z125L25L31z5318x31Z922V22v31kd1231mf31u331U531U724Z24Z31zM24324331Zq24r24r31ZU24G24g31Um31N931er2P322822831uu24v24v31UX31B931v122s22S31v521221231V82tR31VC24624631Vg23O23o31P61g23j23j31vM23S23s31vq24N24n320z24y24y31Po1K25325331w02g631W431tK31W81n25C25c31Wb23B23B31WF21H21H31wJ24K24K31Wn24524531wr23i23i321u236236321y22722731x322l22L31X7284322824w24w31Xe1F316H31nA31ro25725731Xl1Q1Q31XP21L21l322O21221F21f31Xx2nP31Y125q25Q31y431u531y722322331yb31BX31yf22d22d323a255255323e2112yV31Er31T91M2X131eR31tE25825831tH21D24J24J31Z11x1X31Z523Q23Q31z923223231kd1531m0324321g31kE31Cg31FP31nq1431kB31nF31lq31JG31LT16328l1023n24A1T1431LD31Nf28U31j031mN31mM23N2481v31iA31mM31yL328z2Ux329831KE31n91031Y6329928N2cC32911031x9329J31XK31Nf1H1g31Mm31kE319a31mm329d3217325z"), (#TEXT - V90);local function CalculateVM(Index, Value, ...)if (Index == 576793569) then return ((((BitXOR(Value, 730223)) - 373780) - 90278) - 598580);elseif (Index == 90860122) then return (BitXOR(BitXOR((Value) - 971350, 523556), 213214));elseif (Index == 224623869) then return (((BitXOR(Value, 418418)) - 875195) - 671093);elseif (Index == 397293194) then return (BitXOR(BitXOR(BitXOR(Value, 997222), 920065), 592367));elseif (Index == 246422874) then return (BitXOR(BitXOR(BitXOR(Value, 713373), 377449), 406428));elseif (Index == 825940082) then return (BitXOR(BitXOR(BitXOR(BitXOR(Value, 520368), 103501), 719128), 229207));elseif (Index == 806106287) then return (BitXOR(BitXOR(BitXOR((Value) - 371078, 154681), 915881), 670060));elseif (Index == 903989238) then return (BitXOR(BitXOR(BitXOR(Value, 510387), 60215), 240450));elseif (Index == 950393333) then return (BitXOR(((((Value) - 392246) - 669769) - 205722) - 446849, 794698));elseif (Index == 173234846) then return (((((BitXOR(Value, 405605)) - 819198) - 925513) - 461394) - 946454);elseif (Index == 252917296) then return ((BitXOR(BitXOR(Value, 863967), 416414)) - 915135);else end; end;local V324132489 = T[(121976318)];  local V256 = T[((54766634 - #("string here......>.")))];  local V65536 = T.QvQ0WjZ0o;  local V16777216 = T["BoOEwJew"];  local V2 = T[((#{787;430;766;} + 707954135))];  local V0 = T[((145949280 - #("string here......>.")))];  local V1 = T[(34959543)];  local V4 = T[(0x178A42C1)];  local V3 = T[(0x36E653F0)];      local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % V256; Position = (Position + V1); return (F); end; local function gBit(Bit, Start, End) if (End) then local R = (Bit / V2 ^ (Start - V1)) % V2 ^ ((End - V1) - (Start - V1) + V1); return (R - (R % V1)); else local P = V2 ^ (Start - V1); return (((Bit % (P + P) >= P) and (V1)) or(V0)); end; end; local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + V3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % V256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % V256; Position = Position + V4; return ((Z * V16777216) + (Y * V65536) + (X * V256) + W); end; local function gBits16() local W, X = Byte(ByteString, Position, Position + V2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Position = Position + V2; return ((X * V256) + W); end;  local Mode = ""..T[V324132489]; local function _R(...) return ({...}), Select(Mode, ...); end;local function Deserialize(...) local V646576 = T.xfVpIekVh;  local V2047 = T[(199325182)];  local V0 = T[((145949280 - #("string here......>.")))];  local V21 = T[((#{561;(function(...)return 536,0x10F;end)()} + 0x171D6F9F))];  local V12 = T[((170819601 - #("string here......>.")))];  local V5000 = T[((162571825 - #("string here......>.")))];  local V5 = T[((#{0x1D8;(function(...)return 0x11A,0x358,...;end)(0x316,0x2D4)} + 751801389))];  local V38 = T[((49548763 - #("string here......>.")))];  local V3 = T[((921064451 - #("string here......>.")))];  local V920591 = T[(0x3A47BE53)];  local V20 = T[(0x33FB3EE3)];  local V6 = T[((610956524 - #("string here......>.")))];  local V15 = T[(592144908)];  local V8 = T[(0x1D9315BB)];  local V52 = T[(963793631)];  local V256 = T[((#{0x295;(function(...)return 0x31A,0x0F3,712;end)()} + 54766611))];  local V1023 = T['uYGbdu'];  local V566502 = T[((#{855;0x307;0x335;} + 487115228))];  local V1 = T[((#{0x042;0x224;628;(function(...)return 461;end)()} + 0x21570B3))];  local V2 = T[((#{(function(...)return 547,11,0x186,0x158;end)()} + 707954134))];  local V32 = T[(0x53081DD)];  local V4 = T[(0x178A42C1)];  local V607027 = T[(0x2FF53335)];  local V7 = T[((770534789 - #("string here......>.")))];  local V31 = T[((#{0x0F6;} + 810951177))];  local V37 = T[((173242701 - #("string here......>.")))];        local function Deserialize(...)  	local Instructions = ({}); 	local Functions = ({}); 	local Constants = ({});  			  							for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do 								local Type = gBits8(PrimaryXORKey);  								if (Type == V15) then  									local Bool = gBits8(PrimaryXORKey); 									Constants[Index] = (Bool ~= V0);  								elseif (Type == V38) then 									while (true) do 										local Length = gBits32(PrimaryXORKey); 										Constants[Index] = SubString(ByteString, Position, Position + Length - V1); 										Position = Position + Length;  										break; 									end; elseif (Type == V12) then  									while (true) do 										local Length = gBits32(PrimaryXORKey); 										if (Length == V0) then Constants[Index] = (''); break; end;  										if (Length > V5000) then 											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - V1)); 											Position = Position + Length; 											for Index = V1, #ByteString, V1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										else 											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - V1)}); 											Position = Position + Length; 											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										end;  										break; 									end; elseif (Type == V37) then  									while (true) do 										local Left = gBits32(PrimaryXORKey); 										local Right = gBits32(PrimaryXORKey); 										local IsNormal = V1; 										local Mantissa = (gBit(Right, V1, V20) * (V2 ^ V32)) + Left; 										local Exponent = gBit(Right, V21, V31); 										local Sign = ((-V1) ^ gBit(Right, V32)); 										if (Exponent == V0) then 											if (Mantissa == V0) then 												Constants[Index] = (Sign * V0); 												break; 											else 												Exponent = V1; 												IsNormal = V0; 											end; 										elseif(Exponent == V2047) then 											Constants[Index] = (Mantissa == V0) and (Sign * (V1 / V0)) or (Sign * (V0 / V0)); 											break; 										end; 										Constants[Index] = LDExp(Sign, Exponent - V1023) * (IsNormal + (Mantissa / (V2 ^ V52))); 										break; 									end; 								else                                     Constants[Index] = nil 								end; 							end;  							local Count = gBits32(PrimaryXORKey); 							for Index = V0, Count - V1, V1 do Instructions[Index] = ({}); end;  							for Index = V0, Count - V1, V1 do 								local InstructionData = gBits8(PrimaryXORKey); 								if (InstructionData ~= V0) then 									InstructionData = InstructionData - V1; 									local Enum, A, E, D, B, C = V0, V0, V0, V0, V0, V0; 									local InstructionType = gBit(InstructionData, V1, V3);  							if (InstructionType == V2) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; elseif (InstructionType == V1) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); elseif (InstructionType == V3) then  C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; elseif (InstructionType == V6) then  elseif (InstructionType == V0) then  C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = (gBits16(PrimaryXORKey)); elseif (InstructionType == V5) then  C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); D = ({}); for Index = V1, C, V1 do D[Index] = ({[V0] = gBits8(PrimaryXORKey), [V1] = gBits16(PrimaryXORKey)}); end;  end;  							if (gBit(InstructionData, V8, V8) == V1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + V1]; end; if (gBit(InstructionData, V6, V6) == V1) then C = Constants[C]; end; if (gBit(InstructionData, V4, V4) == V1) then A = Constants[A]; end; if (gBit(InstructionData, V5, V5) == V1) then B = Constants[B]; end;  							if (gBit(InstructionData, V7, V7) == V1) then D = ({}); for Index = V1, gBits8(), V1 do D[Index] = gBits32(); end; end;  							local Instruction = Instructions[Index];  							Instruction["bAfzEa8"] = D; Instruction[V646576] = B; Instruction['JWVXCqb'] = E; Instruction[-V607027] = A; Instruction["PqpJ7anv0"] = Enum; Instruction['f6Y8LnkI'] = C; end; end; 	for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do Functions[Index] = Deserialize(); end;  	local ParameterCount = gBits8(PrimaryXORKey);  	local StackSize = gBits16(PrimaryXORKey);   	return ({ 	['Bl4iPU'] = Instructions; 	[V566502] = Functions; 	[-V920591] = ParameterCount; 	['Tt76HozBJ'] = StackSize; 	['Sfod8fi'] = V0; 	["h0ML"] = Constants; 	});  end;    return (Deserialize(...)); end;    local function Wrap(Chunk, UpValues, Environment, ...)  		local InitialInstructionPoint = 0; 	local ParameterCount = Chunk[-920591]; 	local Functions = Chunk[566502]; 	local StackSize = Chunk['Tt76HozBJ']; 	local Instructions = Chunk["Bl4iPU"]; 	local Constants = Chunk['h0ML'];  	return (function(...)  				local PCount = (Select(Mode, ...) - 1); 		local InstructionPoint = Instructions[InitialInstructionPoint]; 		local OP_B = 646576; 		local lUpValues = ({}); 		local OP_C = "f6Y8LnkI"; 		local Arguments = {...}; 		local OP_ENUM = "PqpJ7anv0"; 		local VMKey = (997889997); 		local OP_A = -607027; 		local VarArg = {}; 		local Stack = {}; 		local OP_E = 'JWVXCqb'; 		local OP_D = "bAfzEa8"; 		local Top = -(1); 		local DecryptConstants = (true);  		for Index = 0, PCount, 1 do 			if (Index >= ParameterCount) then 				VarArg[Index - ParameterCount] = Arguments[Index + 1]; 			else 				Stack[Index] = Arguments[Index + 1]; 			end; 		end;  		local VarArgs = PCount - ParameterCount + 1;  		while (true) do 			local Instruction = InstructionPoint; 			local Enum = Instruction[OP_ENUM]; 			InstructionPoint = Instruction[OP_E];if (Enum <= 14) then if (Enum <= 6) then if (Enum <= 2) then if (Enum <= 0) then local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum > 1) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]];elseif (Enum < 2) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]](); Instruction = Instruction[OP_E]; do return; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 4) then if (Enum == 3) then local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]];elseif (Enum <= 4) then Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 5) then local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum < 6) then  local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 10) then if (Enum <= 8) then if (Enum == 7) then Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];elseif (Enum <= 8) then local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end;end;elseif (Enum == 9) then do return; end;elseif (Enum <= 10) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;end;elseif (Enum <= 12) then if (Enum > 11) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 12) then  local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;end;elseif (Enum > 13) then Stack[Instruction[OP_A]] = Instruction[OP_B];elseif (Enum < 14) then  Stack[Instruction[OP_A]] = Create(256);end;elseif (Enum <= 22) then if (Enum <= 18) then if (Enum <= 16) then if (Enum > 15) then InstructionPoint = Instruction[OP_B];elseif (Enum < 16) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 17) then local A = Instruction[OP_A]; Top = A + VarArgs - 1; for Index = 0, VarArgs do Stack[A + Index] = VarArg[Index]; end; for I = Top + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 18) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]];end;elseif (Enum <= 20) then if (Enum > 19) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 20) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];end;elseif (Enum > 21) then local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;elseif (Enum < 22) then  Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);end;elseif (Enum <= 26) then if (Enum <= 24) then if (Enum == 23) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 24) then end;elseif (Enum == 25) then local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;elseif (Enum <= 26) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];end;elseif (Enum <= 28) then if (Enum > 27) then Stack[Instruction[OP_A]] = Wrap(Functions[Instruction[OP_B]], (nil), Environment);elseif (Enum < 28) then  local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;end;elseif (Enum > 29) then Stack[Instruction[OP_A]]();elseif (Enum < 30) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;  					end; 				end); 			end;  			  			return Wrap(Deserialize(), {}, GetFEnv())(...);  end)(({[((872103670 - #("string here......>.")))]=(((39 - #("string here......>."))));[((#{179;825;529;(function(...)return 13;end)()} + 610956501))]=(((#{(function(...)return 909,855,...;end)(841,800)} + 2)));[((#{0x17A;889;} + 0x21570B5))]=(((20 - #("string here......>."))));[(977780307)]=(((#{} + 920591)));[(54766615)]=((256));lB3kr=((0x1537615F));[((#{0x170;999;(function(...)return 928,0x151,...;end)(251,0x3E6)} + 0x234B6A06))]=(((#{833;164;68;248;(function(...)return 256;end)()} + 0x00A)));["QvQ0WjZ0o"]=((65536));[(751801394)]=(((#{0x205;0x04F;923;(function(...)return 683,0x039,456;end)()} - 1)));[((599389351 - #("string here......>.")))]=((0x32D76721));[(173242682)]=((0x025));[((520873791 - #("string here......>.")))]=("\104");[((#{0x189;(function(...)return ;end)()} + 0x2FF53334))]=(((#{(function(...)return 962,0x2F3;end)()} + 607025)));[((833150118 - #("string here......>.")))]=("\97");[((304319432 - #("string here......>.")))]=("\112");['Ibe0dV']=((0x1D1E4019));[((#{0x072;757;706;0x3D6;} + 534142362))]=(((#{0x273;0x142;0x08F;171;(function(...)return ...;end)(0x35C,0x280)} + 258940938)));[(0x178A42C1)]=((0x004));[((#{411;915;0x017;0x1D4;(function(...)return ;end)()} + 50935279))]=((0x31A8DC93));[(239109478)]=((248));["uYGbdu"]=(((#{797;0x062;(function(...)return ;end)()} + 1021)));[(884885278)]=(((810739946 - #("string here......>."))));[((#{} + 0xF6F2010))]=("\118");[((#{} + 511073381))]=((0x05A));LJaDjgM=("\51");VD9zrts=((0xF9D9278));[((#{} + 0x386C564F))]=((0x2B31D369));[(0x1B88B63E)]=(((108023687 - #("string here......>."))));[((#{0x189;} + 49548743))]=(((#{0x0C2;0x15C;(function(...)return 0x03E;end)()} + 0x023)));[((#{0x21F;(function(...)return 0x38F,0x08E;end)()} + 770534767))]=((0x007));[(199325182)]=((2047));dJqNYW=((521005886));[((387805109 - #("string here......>.")))]=(((40 - #("string here......>."))));[((402707930 - #("string here......>.")))]=((0x0E9));[((448375620 - #("string here......>.")))]=(((#{136;} + 0x05A)));[(121976318)]=((324132489));[(93117534)]=("\119");['ISDL0A3dxm']=("\108");[(0x3056220A)]=((0x01F));[(315501214)]=(((93117553 - #("string here......>."))));[((487115250 - #("string here......>.")))]=((566502));["NZRYPop"]=((0x32D180D9));[((963793650 - #("string here......>.")))]=((52));["naiLbmYp"]=(((229 - #("string here......>."))));BoOEwJew=(((16777235 - #("string here......>."))));[((145949280 - #("string here......>.")))]=((0));[((#{794;0x06D;27;(function(...)return ;end)()} + 0x53081DA))]=(((51 - #("string here......>."))));[(261984888)]=("\114");[(0x32D180D9)]=("\116");[((#{0x016;478;487;(function(...)return 451,827,0x377;end)()} + 488521747))]=("\98");[(0x3052E8D7)]=("\121");["pvSdD"]=(((#{545;(function(...)return 0x0AD,386;end)()} + 0x12238BB2)));[((686436651 - #("string here......>.")))]=("\50");["Hd5SL"]=(((184 - #("string here......>."))));[((593886545 - #("string here......>.")))]=((36));[(0x1F0DEB3E)]=("\99");[((170819601 - #("string here......>.")))]=((12));[(0x32D76721)]=("\100");[(162571806)]=((5000));[(0x1537615F)]=("\105");[(0x2656F098)]=("\115");[((#{656;137;46;} + 916474744))]=((0x2656F098));[(496178619)]=((8));[(0x36E653F0)]=(((#{305;(function(...)return ;end)()} + 0x002)));[((#{} + 0x2A3285DA))]=((0x002));['wBu0FddhWz']=((520873772));[(0x1351DE89)]=("\35");["xfVpIekVh"]=(((#{0x19D;(function(...)return 0x30D,0x3CD,209,0x131;end)()} + 0x9DDAB)));[((732479180 - #("string here......>.")))]=((686436632));[(724685673)]=("\110");[(108023668)]=("\109");['GtqqOvyUh']=("\101");["f7caJn"]=("\117");["fJuHC"]=("\111");}), ...);
